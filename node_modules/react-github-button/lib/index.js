'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ajaxGet = require('./ajaxGet');

var _ajaxGet2 = _interopRequireDefault(_ajaxGet);

var _utils = require('./utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var typeToLabel = {
  stargazers: 'Star',
  watchers: 'Watch',
  forks: 'Fork'
};

var typeToPath = {
  forks: 'network'
};

exports["default"] = _react2["default"].createClass({
  displayName: 'GitHubButton',
  propTypes: {
    className: _react.PropTypes.string,
    type: _react.PropTypes.oneOf(['stargazers', 'watchers', 'forks']).isRequired,
    namespace: _react.PropTypes.string.isRequired,
    repo: _react.PropTypes.string.isRequired,
    size: _react.PropTypes.oneOf(['large'])
  },
  getInitialState: function getInitialState() {
    return {
      count: null
    };
  },
  componentDidMount: function componentDidMount() {
    this.xhr = (0, _ajaxGet2["default"])(this.getRequestUrl(), this.setCount);
  },
  componentWillUnmount: function componentWillUnmount() {
    if (this.xhr) {
      this.xhr.abort();
    }
  },
  setCount: function setCount(data) {
    if (!data) return;
    var count = data[this.props.type + '_count'];
    this.setState({ count: count });
  },
  getRequestUrl: function getRequestUrl() {
    var _props = this.props;
    var namespace = _props.namespace;
    var repo = _props.repo;

    return '//api.github.com/repos/' + namespace + '/' + repo;
  },
  getRepoUrl: function getRepoUrl() {
    var _props2 = this.props;
    var namespace = _props2.namespace;
    var repo = _props2.repo;

    return '//github.com/' + namespace + '/' + repo + '/';
  },
  getCountUrl: function getCountUrl() {
    var _props3 = this.props;
    var namespace = _props3.namespace;
    var repo = _props3.repo;
    var type = _props3.type;

    return '//github.com/' + namespace + '/' + repo + '/' + (typeToPath[type] || type) + '/';
  },
  getCountStyle: function getCountStyle() {
    var count = this.state.count;
    if (count !== null) {
      return {
        display: 'block'
      };
    }
    return null;
  },
  render: function render() {
    var _props4 = this.props;
    var className = _props4.className;
    var type = _props4.type;
    var size = _props4.size;

    var rest = _objectWithoutProperties(_props4, ['className', 'type', 'size']);

    delete rest.namespace;
    delete rest.repo;

    var count = this.state.count;

    var buttonClassName = utils.classNames(_defineProperty({
      'github-btn': true,
      'github-btn-large': size === 'large'
    }, className, className));

    return _react2["default"].createElement(
      'span',
      _extends({}, rest, { className: buttonClassName }),
      _react2["default"].createElement(
        'a',
        { className: 'gh-btn', href: this.getRepoUrl(), target: '_blank' },
        _react2["default"].createElement('span', { className: 'gh-ico', 'aria-hidden': 'true' }),
        _react2["default"].createElement(
          'span',
          { className: 'gh-text' },
          typeToLabel[type]
        )
      ),
      _react2["default"].createElement(
        'a',
        { className: 'gh-count', target: '_blank',
          href: this.getCountUrl(),
          style: this.getCountStyle()
        },
        count
      )
    );
  }
});
module.exports = exports['default'];